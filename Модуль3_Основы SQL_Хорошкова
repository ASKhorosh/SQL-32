--=============== МОДУЛЬ 3. ОСНОВЫ SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Выведите для каждого покупателя его адрес проживания, 
--город и страну проживания.

select name, address, city, country 
from customer_list



--ЗАДАНИЕ №2
--С помощью SQL-запроса посчитайте для каждого магазина количество его покупателей.

select s.store_id, count(c.customer_id)
from customer c
left join store s on c.store_id = s.store_id 
group by s.store_id 


--Доработайте запрос и выведите только те магазины, 
--у которых количество покупателей больше 300-от.
--Для решения используйте фильтрацию по сгруппированным строкам 
--с использованием функции агрегации.

select s.store_id, count(c.customer_id)
from customer c
left join store s on c.store_id = s.store_id 
group by s.store_id 
having count(c.customer_id) > 300




-- Доработайте запрос, добавив в него информацию о городе магазина, 
--а также фамилию и имя продавца, который работает в этом магазине.

select s.store_id as store, concat(c.first_name, ' ',c.last_name) as customer, concat(s2.last_name, ' ', s2.first_name) as seller, c2.city 
from customer c
left join store s on c.store_id = s.store_id 
left join staff s2 on s.manager_staff_id = s2.staff_id 
left join address a on s.address_id = a.address_id
left join city c2 on a.city_id = c2.city_id 


--ЗАДАНИЕ №3
--Выведите ТОП-5 покупателей, 
--которые взяли в аренду за всё время наибольшее количество фильмов

select r.customer_id, count(c.customer_id)
from rental r 
left join customer c on r.customer_id = c.customer_id 
group by r.customer_id 
order by count(c.customer_id) desc
limit 5


--ЗАДАНИЕ №4
--Посчитайте для каждого покупателя 4 аналитических показателя:
--  1. количество фильмов, которые он взял в аренду

select r.customer_id, count(c.customer_id)
from customer c
left join rental r on r.customer_id = c.customer_id 
group by r.customer_id 
order by count(c.customer_id)



--  2. общую стоимость платежей за аренду всех фильмов (значение округлите до целого числа)

select c.customer_id, round(sum(p.amount))as full_sum
from customer c
left join payment p on p.customer_id = c.customer_id 
group by c.customer_id 

--  3. минимальное значение платежа за аренду фильма

select c.customer_id, min(p.amount)as min_sum
from customer c
left join payment p on p.customer_id = c.customer_id 
group by c.customer_id 

--  4. максимальное значение платежа за аренду фильма

select c.customer_id, max(p.amount)as max_sum
from customer c
left join payment p on p.customer_id = c.customer_id 
group by c.customer_id 



--ЗАДАНИЕ №5
--Используя данные из таблицы городов составьте одним запросом всевозможные пары городов таким образом,
 --чтобы в результате не было пар с одинаковыми названиями городов. 
 --Для решения необходимо использовать декартово произведение.
 

select c.city , c2.city 
from city c 
cross join city c2 
where c.city < c2.city


--ЗАДАНИЕ №6
--Используя данные из таблицы rental о дате выдачи фильма в аренду (поле rental_date)
--и дате возврата фильма (поле return_date), 
--вычислите для каждого покупателя среднее количество дней, за которые покупатель возвращает фильмы.
 
select r.customer_id , round(avg(r.return_date::date - r.rental_date::date)) as avg_rent_days
from rental r 
left join customer c on r.customer_id = c.customer_id 
group by r.customer_id




--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Посчитайте для каждого фильма сколько раз его брали в аренду и значение общей стоимости аренды фильма за всё время.





--ЗАДАНИЕ №2
--Доработайте запрос из предыдущего задания и выведите с помощью запроса фильмы, которые ни разу не брали в аренду.





--ЗАДАНИЕ №3
--Посчитайте количество продаж, выполненных каждым продавцом. Добавьте вычисляемую колонку "Премия".
--Если количество продаж превышает 7300, то значение в колонке будет "Да", иначе должно быть значение "Нет".







